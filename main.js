var TABLE;
var FILTERS = [];

function handleDropdownChange(event) {
  const selectedValue = event.target.value;
  const selectedColumn = event.target.dataset.column;
  console.log(`Selected value: ${selectedValue}, ${typeof(selectedValue)} from column ${selectedColumn}`);
  const index = FILTERS.findIndex(item => item.field === selectedColumn);
  if (index !== -1) {
      FILTERS.splice(index, 1);
  }
  if (selectedValue.length !== 0) {
    FILTERS.push({field: selectedColumn, type:"=", value:selectedValue});
  }
  TABLE.setFilter(FILTERS);
  // Add your custom logic here
}


function createDropdowns(data) {
  const dropdownContainer = document.getElementById('dropdowns');
  const columnsToCreate = ["File write","Registry write", "IPC", "Administrator privileges", "Additional software",
    "System privileges at execution", "Destructiveness", "Code type"];
  for (const column of columnsToCreate) {
    const uniqueValues = [...new Set(data.map(row => row[column]))];

    const dropdown = document.createElement('div');
    dropdown.classList.add('flex', 'items-center', 'space-x-2');

    const label = document.createElement('label');
    label.classList.add('font-medium');
    label.textContent = column;

    const select = document.createElement('select');
    select.classList.add('px-4', 'py-2', 'rounded', 'border', 'focus:outline-none', 'focus:ring', 'focus:ring-blue-400');
    select.dataset.column = column;
    select.addEventListener('change', handleDropdownChange);

    const defaultOption = document.createElement('option');
    defaultOption.value = '';
    defaultOption.textContent = 'Select an option';
    select.appendChild(defaultOption);

    uniqueValues.forEach(value => {
      const option = document.createElement('option');
      option.value = value;
      option.textContent = value;
      select.appendChild(option);
    });

    dropdown.appendChild(label);
    dropdown.appendChild(select);
    dropdownContainer.appendChild(dropdown);
  }
}

var customTickCross = function(cell, formatterParams, onRendered) {
  const value = cell.getValue();
	tick = typeof formatterParams.tickElement !== "undefined" ? formatterParams.tickEleme : '<svg enable-background="new 0 0 24 24" height="14" width="14" viewBox="0 0 24 24" xml:space="preserve" ><path fill="#2DC214" clip-rule="evenodd" d="M21.652,3.211c-0.293-0.295-0.77-0.295-1.061,0L9.41,14.34  c-0.293,0.297-0.771,0.297-1.062,0L3.449,9.351C3.304,9.203,3.114,9.13,2.923,9.129C2.73,9.128,2.534,9.201,2.387,9.351  l-2.165,1.946C0.078,11.445,0,11.63,0,11.823c0,0.194,0.078,0.397,0.223,0.544l4.94,5.184c0.292,0.296,0.771,0.776,1.062,1.07  l2.124,2.141c0.292,0.293,0.769,0.293,1.062,0l14.366-14.34c0.293-0.294,0.293-0.777,0-1.071L21.652,3.211z" fill-rule="evenodd"/></svg>',
	cross = typeof formatterParams.crossElement !== "undefined" ? formatterParams.crossElem : '<svg enable-background="new 0 0 24 24" height="14" width="14"  viewBox="0 0 24 24" xml:space="preserve" ><path fill="#CE1515" d="M22.245,4.015c0.313,0.313,0.313,0.826,0,1.139l-6.276,6.27c-0.313,0.312-0.313,0.826,0,1.14l6.273,6.272  c0.313,0.313,0.313,0.826,0,1.14l-2.285,2.277c-0.314,0.312-0.828,0.312-1.142,0l-6.271-6.271c-0.313-0.313-0.828-0.313-1.141,0  l-6.276,6.267c-0.313,0.313-0.828,0.313-1.141,0l-2.282-2.28c-0.313-0.313-0.313-0.826,0-1.14l6.278-6.269  c0.313-0.312,0.313-0.826,0-1.14L1.709,5.147c-0.314-0.313-0.314-0.827,0-1.14l2.284-2.278C4.308,1.417,4.821,1.417,5.135,1.73  L11.405,8c0.314,0.314,0.828,0.314,1.141,0.001l6.276-6.267c0.312-0.312,0.826-0.312,1.141,0L22.245,4.015z"/></svg>';


  // Check if the value is boolean
  if (value === "true") {
    return tick; // Tick (checkmark)
  } else if (value === "false") {
    return cross; // Cross (X)
  } else {
    return value; // Return the original value for anything else
  }
}

async function initializeTable() {
  const response = await fetch('data.json');
  let { data } = await response.json();
  data = data.map(obj => {
    Object.keys(obj).forEach(key => {
      switch (obj[key]) {
        case "yes":
          obj[key] = "true";
          break;
        case "no":
          obj[key] = "false";
      }
    });
    return obj;
  });

  // Initialize Tabulator on the placeholder div
  TABLE = new Tabulator("#example-table", {
    data: data, // Load initial data
    // importFormat: "csv",
    height: "60em",
    autoColumns: false,
    layout: "fitColumns",
    columns: [
      { title: "Name", field: "Name", sorter: "string", width: 200, formatter: "link", formatterParams: {
      	urlPrefix: "./techniques",
      }},
      {
        title: "Prereqs",
        columns: [
          { title: "File write", field: "File write", hozAlign: "center", formatter: customTickCross },
          { title: "Registry write", field: "Registry write", hozAlign: "center", formatter: customTickCross },
          { title: "IPC", field: "IPC", hozAlign: "center", formatter: customTickCross },
          { title: "Elevated privileges", field: "Administrator privileges", formatter: customTickCross },
          { title: "Software", field: "Additional software", formatter: customTickCross }
        ]
      },
      {
        title: "Result",
        columns: [
          { title: "Destructiveness", field: "Destructiveness", hozAlign: "center", formatter: "tickCross" },
          { title: "Code type", field: "Code type", sorter: "string" },
          { title: "Privileges", field: "System privileges at execution", formatter: customTickCross},
          { title: "Moment of execution", field: "Moment of execution", sorter: "string", width: 400 },
        ]
      }
    ],
    layout: "fitColumns", // Fit columns to the width of the table
    pagination: false,
    movableColumns: false, 
    movableRows: false,
    resizableRows: false, 
    resizableColumns: false, 
  });
  createDropdowns(data);
}
initializeTable();
